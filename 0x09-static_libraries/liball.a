!<arch>
0-isupper.c/    0           0     0     644     234       `
#include "main.h"

/**
 * _isupper - checks for uppercase character
 * @c: any character
 * Return: 1 for uppercase or 0 for any other character
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-strcat.c/     0           0     0     644     494       `
#include "main.h"
#include <stdio.h>

/**
 * _strcat - a pointer to char function
 * @dest: a pointer to character
 * @src: a pointer to character
 * Description: function that concatenates two strings
 * Return: the value of dest
 */

char *_strcat(char *dest, char *src)
{
	int i, j, len_d = 0, len_s = 0;

	for (i = 0; dest[i] != '\0'; i++)
		len_d++;
	for (j = 0; src[j] != '\0'; j++)
		len_s++;
	for (i = len_d, j = 0; j != len_s + 1; i++, j++)
	{
		dest[i] = src[j];
	}
	return (dest);
}
1-isdigit.c/    0           0     0     644     228       `
#include "main.h"

/**
 * _isdigit -  checks for a digit (0 through 9)
 * @c: any num
 * Return: 1 for digits or 0 for any other character
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}
1-strncat.c/    0           0     0     644     496       `
#include "main.h"
#include <stdio.h>

/**
 * _strncat - a pointer to char function
 * @dest: a pointer to character
 * @src: a pointer to character
 * @n: an integer
 * Description: function that concatenates two strings
 * Return: the value of dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j, len_d = 0;

	for (i = 0; dest[i] != '\0'; i++)
		len_d++;
	for (i = len_d, j = 0; j != n && src[i] != '\0'; i++, j++)
	{
		dest[i] = src[j];
	}
	dest[i + n] = '\0';
	return (dest);
}
2-strlen.c/     0           0     0     644     261       `
#include "main.h"
#include <stdio.h>

/**
 * _strlen - returns the length of a string
 * @s: pointer to a char
 * Return: the value of count
 */

int _strlen(char *s)
{
	int i, count = 0;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		count++;
	}
	return (count);
}

3-islower.c/    0           0     0     644     253       `
#include "main.h"

/**
 * _islower -  checks for lowercase character
 * @c: contains the alphabet
 * Return: 1 for lowercase character or 0 for uppercase character
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-strcmp.c/     0           0     0     644     397       `
#include "main.h"
#include <stdio.h>

/**
 * _strcmp - function that compares two strings
 * @s1: a pointer to char
 * @s2: a pointer to char
 * Return: r if strings are different or 0 if same
 */

int _strcmp(char *s1, char *s2)
{
	int i, j, r;

	for (i = 0, j = 0; s1[i] != '\0' && s2[j] != '\0'; i++, j++)
	{
		if (s1[i] != s2[j])
		{
			r = s1[i] - s2[j];
			return (r);
		}
	}
	return (0);
}

4-isalpha.c/    0           0     0     644     296       `
#include "main.h"

/**
 * _isalpha - checks is the character is alphabetic or not
 * @c: contains the character
 * Return: 1 for alphabetic character or 0 for any other character
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	else
		return (0);
}
5-strstr.c/     0           0     0     644     301       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * _strstr - function that locates a substring
 * @haystack: a pointer to char
 * @needle: a pointer to char
 * Return: the value of x
 */

char *_strstr(char *haystack, char *needle)
{
	char *x = strstr(haystack, needle);

	return (x);
}

9-strcpy.c/     0           0     0     644     275       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * _strcpy - copies the string
 * @dest: a pointer to a char
 * @src: a pointer to a char
 * Return: the new value of dest pointer
 */

char *_strcpy(char *dest, char *src)
{
	strcpy(dest, src);
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

0-memset.c/     0           0     0     644     323       `
#include "main.h"
#include <stdio.h>

/**
 * _memset - function that fills memory with a constant byte
 * @s: a pointer to char
 * @b: char variable
 * @n: unsigned integer
 * Return: the value of s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;
	return (s);
}

100-atoi.c/     0           0     0     644     522       `
#include <stdio.h>
#include <stdlib.h>

/**
 * _atoi - convert a string to an integer
 * @s: a pointer to a char
 * Return: the value of x
 */

int _atoi(char *s)
{
	int x, min, digit, l, i;

	x = 0;
	min = 0;
	digit = 0;
	l = 0;
	for (i = 0; s[i] != '\0'; i++)
		l++;
	for (i = 0; i < l; i++)
	{
		if (s[i] == '-')
			min++;
		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (min % 2)
				digit = -digit;
			x = (x * 10) + digit;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
		}
	}
	return (x);
}
1-memcpy.c/     0           0     0     644     337       `
#include "main.h"
#include <stdio.h>

/**
 * _memcpy - function that copies memory area
 * @dest: a pointer to char
 * @src: a pointer to char
 * @n: unsigned integer
 * Return: the value of dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}

2-strchr.c/     0           0     0     644     435       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr - function that locates a character in a string
 * @s: a pointer to char
 * @c: a character variable
 * Return: a pointer to the first occurrence of
 * the character c in the string s, or NULL if the character is not found
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; (s[i] != c) && (s[i] != '\0'); i++)
		;
	if (s[i] == c)
		return (s + i);
	else
		return (NULL);
}

2-strncpy.c/    0           0     0     644     355       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * _strncpy - a pointer to char function
 * @dest: a pointer to character
 * @src: a pointer to character
 * @n: an integer
 * Description: function that copies a string
 * Return: the value of dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	strncpy(dest, src, n);
	return (dest);
}

3-puts.c/       0           0     0     644     261       `
#include "main.h"
#include <stdio.h>

/**
 * _puts - prints a string, followed by a new line
 * @str: pointer to a char
 * Return: null
 */

void _puts(char *str)
{
	int i;

	for (i = 0; *(str + i) != '\0'; i++)
	{
		_putchar(*(str + i));
	}
	_putchar('\n');
}

3-strspn.c/     0           0     0     644     436       `
#include "main.h"
#include <stdio.h>

/**
 * _strspn - function that gets the length of a prefix substring
 * @s: a pointer to char
 * @accept: a pointer to char
 * Return: the value of count
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int j, i, count = 0;

	for (i = 0; (s[i] != '\0') && (s[i] != ' '); i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
				count++;
		}
	}
	return (count);
}
4-strpbrk.c/    0           0     0     644     307       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * _strpbrk - function that searches a string for any of a set of bytes
 * @s: a pointer to char
 * @accept: a pointer to char
 * Return: the value of x
 */

char *_strpbrk(char *s, char *accept)
{
	char *x = strpbrk(s, accept);

	return (x);
}

6-abs.c/        0           0     0     644     210       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer
 * @c: contains an integer
 * Return: always a
 */
int _abs(int c)
{
	int a;

	if (c >= 0)
		a = c;
	else
		a = c * -1;
	return (a);
}
